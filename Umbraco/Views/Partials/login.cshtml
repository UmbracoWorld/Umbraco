@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@using Umbraco.Cms.Web.Common.Security
@using Umbraco.Cms.Web.Website.Controllers
@using Umbraco.Features.MembersAuth
@using LoginModel = Umbraco.Features.MembersAuth.LoginModel
@inject IMemberExternalLoginProviders memberExternalLoginProviders

@{
    var loginModel = new LoginModel
    {
        RedirectUrl = Context.Request.Path == "/login" ? "/" : Context.Request.Path
    };
    
    var isLoggedIn = Context.User?.Identity?.IsAuthenticated ?? false;
}

<div class="login-form">
    @{
        var loginProviders = await memberExternalLoginProviders.GetMemberProvidersAsync();
        var externalSignInError = ViewData.GetExternalSignInProviderErrors();

        if (loginProviders.Any())
        {
            if (externalSignInError?.AuthenticationType is null && externalSignInError?.Errors.Any() == true)
            {
                @Html.DisplayFor(x => externalSignInError.Errors)
            }
            <div class="btn-group btn-group-lg justify-content-center">
                @foreach (var login in await memberExternalLoginProviders.GetMemberProvidersAsync())
                {
                    @using (Html.BeginUmbracoForm<UmbExternalLoginController>(nameof(UmbExternalLoginController.ExternalLogin)))
                    {
                        
                        <input type="hidden" name="returnUrl" value="@loginModel.RedirectUrl"/>
                        <button class="btn btn-outline-primary" type="submit" name="provider" value="@login.ExternalLoginProvider.AuthenticationType">
                            <span><img src="assets/images/icons/github.png"/> Sign in with @login.AuthenticationScheme.DisplayName</span>
                        </button>

                        if (externalSignInError?.AuthenticationType == login.ExternalLoginProvider.AuthenticationType)
                        {
                            @Html.DisplayFor(x => externalSignInError.Errors)
                        }
                    }
                }
            </div>
        }
    }
    <h5 class="text-center">OR</h5>
    @using (Html.BeginUmbracoForm<MemberLoginController>("HandleLogin", new
    {
        RedirectUrl = loginModel.RedirectUrl
    }, htmlAttributes: new { @novalidate = "true", @class="needs-validation"}))
    {
        @if (ViewData.ModelState.ContainsKey("loginModel"))
        {
            <div class="alert alert-danger">
                @Html.ValidationMessage("loginModel")
            </div>
        }


        <div class="form-group mb-3">
            <label asp-for="@loginModel.Username"></label>
            <input asp-for="@loginModel.Username" class="form-control" aria-describedby="emailHelp" required type="email"/>
            <span asp-validation-for="@loginModel.Username" class="form-text text-danger"></span>
            <div class="valid-feedback">👍 Looks good</div>
            <div class="invalid-feedback">Hmm… that email doesn't look valid</div>
        </div>
        <div class="form-group mb-3">
            <label asp-for="@loginModel.Password" class="form-label"></label>
            <input asp-for="@loginModel.Password" class="form-control" required/>
            <span asp-validation-for="@loginModel.Password" class="form-text text-danger"></span>
            <div class="valid-feedback">👍 Looks good</div>
            <div class="invalid-feedback">Your password can't be empty!</div>
        </div>
        
        <div class="form-check mb-3">
            <input asp-for="@loginModel.RememberMe" class="form-check-input">
            <label asp-for="@loginModel.RememberMe" class="form-check-label">
                @Html.DisplayNameFor(m => loginModel.RememberMe)
            </label>
        </div>
        
        <button type="submit" class="btn btn-primary">log in</button>


        <div class="mt-5 small">
            <a href="/register">Need an account?</a>
            <br/>
            <a href="/register">Forgotten your password?</a>
        </div>
    }
</div>